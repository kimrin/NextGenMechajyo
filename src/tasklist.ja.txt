# 
# TODO LIST (In Japanese)
# 
# 
# ・やるべきことのTODOリスト（自己管理用）
# ・updated 2014/04/20
#
# ・可能手生成（movegen.cpp）
#   ・まだnormal move(NON_EVASIONS)の一部しかできていない
#   ・move pickとも関わる部分なので、CAPTURES, EVASIONSについて、
#   　可能手を生成できるようになる必要あり
#
# ・move ordering(movepick.cpp)
#   ・できればSEEを実装しておく
#   ・move pickの各ステージを実装する
#     関連してTransposition Tableも進められるとよい
#
# ・do/undo moves(position.cpp?)
#   ・これが無いと始まらないので、ともかく実装する
#     CAPTURES, EVASIONS, あとDROPSについても可能手生成ができるようになったら
#     早急にdo/undoを実装する。ケースが網羅できれば可能手生成祭りの局面などで検証ができるようになるはず
#
# ・Bonanza evaluation functionの実装
#   ・calc differentはもう諦める。ともかく既存のWCSC23内にあるJuliaのコードをNextGenMechajyoで動くように修正すること
#   ・evaluation transposition table (cache)について、実装すること。サイズに気を配ること
#
# ・Transposition Table
#   ・必要な物なので、できるだけ早く実装する
#   ・hash()関数を活用して、exclusive movesだけ実装して、あとはDict<K,V>に任せる
#     サイズは気にした方がいい。ただ、32vCPUs時で120GBメモリがあるので、どんどん使うこと
#     もういざとなったら、examples/lru.jlをそのまま持ってきて修正して使ってしまうとよい
#     (ライセンスが若干面倒い。。。)
#
# ・探索(search.cpp)
#   ・ひとまず評価関数と可能手生成、do/undo、move pickerがそろったら、
#     探索を作ってみる。自分でまずはシンプルなAlpha-Betaを実装してもよい
#   ・はじめから全部を実装するのでなく、最低限のAlpha-Beta実装を行っておいて、
#     pruningをだんだんに実装してNPSと探索深さを大きくしていく作戦
#
# ・時間管理、ponder
#   ・ponderはまだ実装したことがないので、どうやって実装するか考える
#     時間管理はponderと関連してくるが、12秒思考がデフォルト、ponder hitしたら思考開始から16秒くらいで相手に渡せばいいのでは
#     ponderのように裏で思考をするケースは、後々のマルチプロセッサ対応を見越して実装した方がよい
#
# ・マルチプロセッサ対応
#   ・CPUのパワーがもったいないのでぜひ入れたい。出来れば複数マシン
#     ただ、全部上記ができてからの対応で大丈夫（間に合わないかも）
#     pmap()を改良すれば、beta-cutの実装なんかもできそうな気がする
#     あまりStockifshの実装を真似しようとせず、自分でここは実装する
#     基礎的な検討がもう少しできれば、pmapならぬshogimapみたいなのを
#     実装して、マシンごとにBitMapTableとTransposition Tableを分けておけば
#     いいんでないか
#
# ・将棋所（時間をみてやっておく）
#   ・出来れば安定動作を狙いたいので、parallels か VMWare Fusionのいずれか＋Windows8.1の
#     組み合わせでMacにインストールして、将棋所をインストールしたら、あとは.NetTelnetを改良して、
#     host.txtに書かれているホストにアクセスするtelnet相当のプログラムを将棋所のエンジンとして
#     登録しておけばよい。あとは各コマンドを実装する。最低限の所でいうと、position, go, 投了など
#
#   ・parallels か　VMWare Fusionが、複数のネットワークポートに対応しているか確認する。できれば
#     事前動作確認したいところ

## 過去のTODO List
# 
# MANDATORY:
# 
# ・最低限のコマンド送受信 => これから出来上がった部品ごとに、つなぐ予定
# 　・uci/usiからnewucigame/newusigameに至る初期化シーケンス
# 　・positionを受けてgoまでのシーケンス
# 　・出来ればponder周り
# => これから出来上がった部品ごとに、つなぐ予定。ponderをどうしよう、別スレッド立てる。。。
# 
# ・TCP/IPでの標準入出力⇔ソケット通信部
# 　・任意のポートに対して思考エンジンサーバーを立ち上げられるようにする
# 　・それを将棋所に接続されたsocket(1)プログラムと通信することで、
# 　　将棋所との通信を確立する
# => ほぼDONE
# 
# MUST TODO(新しいエンジンを作るなら、必要な部分)
#  
# ・可能手生成部分（Stockfish Mannerで）
# 　基本的にmovegen.cppでやってることを将棋でもできるようにする
# 　・bitboard（Sliding Pieces含む）の実装が不可欠
# 　　Magic BitBoardのmagic numbersの作り方を参考にしながら
# 　　角と飛車の効きを算出する。基本RookとBishopが9x9に拡張された形に
# 　　香車が特殊だが、飛車の効きに対して、前方向きのマスクを掛けるだけでいい
# => NON_EVASIONSの途中まで。もうちょっと掛かりそう
# => MovePickerの実装も必須っぽい
# 
# ・評価関数（Using Bonanza's fv.bin）=> WCSC23の実装で、ほぼ正しい値を求められるルーチンを作成できた。あとは差分評価などを実装する予定
# 　・現在の実装は評価値の検証がなされておらず、不完全な実装
# 　・row major -> column major の変更を行っても強さがかわらないため、
# 　　ほぼrandom値と同じくらいの効果しかないものと思われる
# 　・fv.binを使えば数手読むだけで囲いを作ったりなどするそうで、
# 　　まずは完全に同じ評価値を出力するルーチンをJuliaで実装する
# => 手付かず。Juliaのソースコードは既にあるので、まずはportingをはじめるべし
# 
# ・探索部（Stockfish Mannerで）
# 　基本的にはsearch.cppをJuliaに移植する作業
# 　・その前に簡単な探索を入れてみて、動くかどうか確認するとよいかも
# 　・できればperft(benchmark)も入れたいが、オプション
# => 手付かず。まずはportingをはじめるべし
# => コード量が一番多いファイルなので、出来るだけここを進めたい
# 
# WISH TODO(強くするためにどうしても欲しい部分)
# 
# ・並列探索（スレッド協調の実装）
# 　・基本的にはJulia言語のやり方で、並列探索を実装する
# 　　SplitPointとsplit()関数の実装という形になると思う
# 　　・よく構想を練れば、比較的軽い実装で並列化できるのでは、と思っている
# 　　・確認の仕方は、シングルスレッドと並列時で結果がかわるかどうかを確認する
# => ちょっと無理かも。。。
