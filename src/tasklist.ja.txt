# 
# TODO LIST (In Japanese)
# 
# 
# ・やるべきことのTODOリスト（自己管理用）
# 
# MANDATORY:
# 
# ・最低限のコマンド送受信 => これから出来上がった部品ごとに、つなぐ予定
# 　・uci/usiからnewucigame/newusigameに至る初期化シーケンス
# 　・positionを受けてgoまでのシーケンス
# 　・出来ればponder周り
# => これから出来上がった部品ごとに、つなぐ予定。ponderをどうしよう、別スレッド立てる。。。
# 
# ・TCP/IPでの標準入出力⇔ソケット通信部
# 　・任意のポートに対して思考エンジンサーバーを立ち上げられるようにする
# 　・それを将棋所に接続されたsocket(1)プログラムと通信することで、
# 　　将棋所との通信を確立する
# => ほぼDONE
# 
# MUST TODO(新しいエンジンを作るなら、必要な部分)
#  
# ・可能手生成部分（Stockfish Mannerで）
# 　基本的にmovegen.cppでやってることを将棋でもできるようにする
# 　・bitboard（Sliding Pieces含む）の実装が不可欠
# 　　Magic BitBoardのmagic numbersの作り方を参考にしながら
# 　　角と飛車の効きを算出する。基本RookとBishopが9x9に拡張された形に
# 　　香車が特殊だが、飛車の効きに対して、前方向きのマスクを掛けるだけでいい
# => NON_EVASIONSの途中まで。もうちょっと掛かりそう
# => MovePickerの実装も必須っぽい
# 
# ・評価関数（Using Bonanza's fv.bin）=> WCSC23の実装で、ほぼ正しい値を求められるルーチンを作成できた。あとは差分評価などを実装する予定
# 　・現在の実装は評価値の検証がなされておらず、不完全な実装
# 　・row major -> column major の変更を行っても強さがかわらないため、
# 　　ほぼrandom値と同じくらいの効果しかないものと思われる
# 　・fv.binを使えば数手読むだけで囲いを作ったりなどするそうで、
# 　　まずは完全に同じ評価値を出力するルーチンをJuliaで実装する
# => 手付かず。Juliaのソースコードは既にあるので、まずはportingをはじめるべし
# 
# ・探索部（Stockfish Mannerで）
# 　基本的にはsearch.cppをJuliaに移植する作業
# 　・その前に簡単な探索を入れてみて、動くかどうか確認するとよいかも
# 　・できればperft(benchmark)も入れたいが、オプション
# => 手付かず。まずはportingをはじめるべし
# => コード量が一番多いファイルなので、出来るだけここを進めたい
# 
# WISH TODO(強くするためにどうしても欲しい部分)
# 
# ・並列探索（スレッド協調の実装）
# 　・基本的にはJulia言語のやり方で、並列探索を実装する
# 　　SplitPointとsplit()関数の実装という形になると思う
# 　　・よく構想を練れば、比較的軽い実装で並列化できるのでは、と思っている
# 　　・確認の仕方は、シングルスレッドと並列時で結果がかわるかどうかを確認する
# => ちょっと無理かも。。。
